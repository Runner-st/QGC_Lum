name: QGC_Lum Builds

on:
  push:
    tags:
      - "v*.*.*"   # запуск при пуші тегів vX.Y.Z
  workflow_dispatch:  # ручний запуск

jobs:
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Qt 6.7.2 + required modules
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.7.2
          host: windows
          arch: win64_msvc2019_64
          modules: 'qtcharts qt5compat qtlocation qtmultimedia qtsensors qtspeech qtwebsockets qtpositioning'

      - name: Install NSIS
        run: choco install nsis -y

      - name: Install dependencies
        run: |
          choco install -y ninja cmake git ccache
          choco install -y gstreamer gstreamer-devel

      - name: Locate GStreamer
          id: gst
          shell: pwsh
          run: |
            # шукаємо директорію де лежить GStreamer
            $gstRoot = Get-ChildItem -Directory "C:\*" -Recurse -ErrorAction SilentlyContinue `
                        | Where-Object { $_.FullName -like "*gstreamer\1.0\msvc_x86_64" } `
                        | Select-Object -First 1

            if (-not $gstRoot) {
              Write-Error "Не знайшов GStreamer!"
              exit 1
            }

            echo "GSTREAMER_ROOT=$($gstRoot.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "CMAKE_PREFIX_PATH=$($gstRoot.FullName)\lib\cmake\gstreamer-1.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

       - name: Configure CMake
          run: |
            cmake -B build -DCMAKE_BUILD_TYPE=Release -DQGC_INSTALLER=ON `
              -DGSTREAMER_ROOT="${{ env.GSTREAMER_ROOT }}" `
              -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: QGC_Lum-Windows
          path: build/package/*.exe

  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Qt 6.7.2 + required modules
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.7.2
          host: linux
          modules: 'qtcharts qt5compat qtlocation qtmultimedia qtsensors qtspeech qtwebsockets qtpositioning'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev patchelf \
            gstreamer1.0-tools gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly gstreamer1.0-libav \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-good1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            libgstreamer-plugins-ugly1.0-dev \
            libgstreamer1.0-dev

      - name: Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j$(nproc)
          cmake --install build --prefix AppDir/usr

      - name: Build AppImage
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --executable AppDir/usr/bin/qgroundcontrol \
            --desktop-file deploy/qgroundcontrol.desktop \
            --icon-file deploy/icons/qgroundcontrol.png \
            --output appimage

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: QGC_Lum-Linux
          path: ./*.AppImage

  release:
    runs-on: ubuntu-latest
    needs: [windows, linux]
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: QGC_Lum-Windows
          path: artifacts

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: QGC_Lum-Linux
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
